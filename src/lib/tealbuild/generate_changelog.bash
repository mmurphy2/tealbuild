# generate_changelog
#
# This function is part of TealBuild.
#
# Copyright 2021 Coastal Carolina University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# Generates the ChangeLog.txt file in the repository, using the packages.diff
# file (generated by the generate_repo_pkglist function) as a source.

function generate_changelog() {
    local action name pkg prevaction prevname prevpkg prevver status temp version
    local handled_packages=()

    check_repo || return 1
    cd "${REPO}/${ARCH}"
    echo "Generating ChangeLog.txt"

    if [[ ! -f "packages.diff" ]]; then
        echo "Package difference file missing: run generate-repo-pkglist first." >&2
        return 1
    fi

    if [[ -f "ChangeLog.txt" ]]; then
        mv ChangeLog.txt ChangeLog.orig
    fi

    date -u "+%a %b %e %H:%M:%S %Z %Y" > ChangeLog.txt

    prevaction=""
    prevname=""
    while read -r line; do
        pkg="${line:2}"
        name="${pkg%-*-*-*}"
        version=$(echo "${pkg}" | sed "s/${name}-//" | sed 's/-.*-.*$//')
        action="${line:0:1}"

        if [[ -n "${prevname}" ]]; then
            # All the output happens starting with the second iteration through the loop, since we need to compare
            # the previous package name (and version) to the current one.
            if [[ "${name}" == "${prevname}" ]]; then
                if [[ "${prevpkg%-*}" == "${pkg%-*}" ]]; then
                    # Only the tags differ
                    echo "${pkg}:  Rebuilt." >> ChangeLog.txt
                else
                    # Is the new version greater than the old one?
                    if [[ "$(echo -e '${prevver}\n${version}' | sort -g | tail -n 1)" == "${version}" ]]; then
                        echo "${pkg}:  Upgraded." >> ChangeLog.txt
                    else
                        echo "${pkg}:  Downgraded." >> ChangeLog.txt
                    fi
                fi
                prevaction=""
                prevname=""
                prevver=""
                prevpkg=""
            else
                # Names do not match, so the package we saved during the last iteration of the loop is either newly
                # added or has been removed.
                if [[ "${prevaction}" == ">" ]]; then
                    echo "${prevpkg}:  Added." >> ChangeLog.txt
                else
                    echo "${prevpkg}:  Removed." >> ChangeLog.txt
                fi

                # Prime for the next iteration using the current package
                prevname="${name}"
                prevver="${version}"
                prevaction="${action}"
                prevpkg="${pkg}"
            fi
        else
            # Either the first iteration or we just handled a rebuild/upgrade. We need to prime the comparison
            # again by simply saving the information for the next iteration.
            prevname="${name}"
            prevver="${version}"
            prevaction="${action}"
            prevpkg="${pkg}"
        fi
    done < packages.diff

    # Any leftover prevpkg is an add or remove
    if [[ -n "${prevpkg}" ]]; then
        if [[ "${prevaction}" == ">" ]]; then
            echo "${prevpkg}:  Added." >> ChangeLog.txt
        else
            echo "${prevpkg}:  Removed." >> ChangeLog.txt
        fi
    fi

    # If there were no actual changes, just print a message to that effect
    temp=$(wc -l ChangeLog.txt | awk '{print $1}')
    if [[ ${temp} -lt 2 ]]; then
        echo "No changes were detected in the repository."
        [[ "-f ChangeLog.orig" ]] && mv ChangeLog.orig ChangeLog.txt
    else
        # Let the user edit the ChangeLog to make any adjustments
        ${EDITOR:-vi} ChangeLog.txt
        if [[ $? -ne 0 ]]; then
            echo "Unable to launch ${EDITOR:-vi}. Review the ChangeLog.txt manually!"
        fi
    fi

    # Append original changelog
    if [[ -f "ChangeLog.orig" ]]; then
        echo "+--------------------------+" >> "ChangeLog.txt"
        cat "ChangeLog.orig" >> "ChangeLog.txt"
    fi

    # Clean up
    rm -f ChangeLog.orig packages.diff
    cd - > /dev/null

    [[ -f "${REPO}/${ARCH}/ChangeLog.txt" ]]
    status=$?

    [[ ${status} -ne 0 ]] && echo "Failed to generate ChangeLog.txt" >&2
    return ${status}
}
